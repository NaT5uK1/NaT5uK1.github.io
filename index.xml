<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Confect</title><link>https://nat5uk1.github.io/</link><description>Recent content on Confect</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 27 Jul 2022 15:31:10 +0800</lastBuildDate><atom:link href="https://nat5uk1.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>所有权的定义</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%89%80%E6%9C%89%E6%9D%83/%E6%89%80%E6%9C%89%E6%9D%83%E7%9A%84%E5%AE%9A%E4%B9%89/</link><pubDate>Tue, 15 Feb 2022 13:52:17 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%89%80%E6%9C%89%E6%9D%83/%E6%89%80%E6%9C%89%E6%9D%83%E7%9A%84%E5%AE%9A%E4%B9%89/</guid><description>本质 所有权是用来管理heap的一套规则。规则检查在编译时完成，不会产生任何运行时开销。 职责 跟踪代码的哪些部分正在使用heap的哪些数据 最小化heap上</description></item><item><title>变量与可变性</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/</link><pubDate>Sun, 13 Feb 2022 14:58:53 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/</guid><description>变量与可变性 声明变量使用let关键字 let x = 1; 默认情况下，变量是不可变的（immutable） let x = 1; x = 2; //cannot assign twice to immutable variable `x` 在声明变量时，可通过mut关键</description></item><item><title>rustup</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/rustup/</link><pubDate>Sat, 12 Feb 2022 13:53:35 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/rustup/</guid><description>rustup是什么？ rustup 用于管理不同平台下的 Rust 构建版本并使其互相兼容， 支持安装由 Beta 和 Nightly 频道发布的版本，并支持其他用于交叉编译的编译版本。 rustup是R</description></item><item><title>引用与借用</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%89%80%E6%9C%89%E6%9D%83/%E5%BC%95%E7%94%A8%E4%B8%8E%E5%80%9F%E7%94%A8/</link><pubDate>Tue, 15 Feb 2022 15:38:28 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%89%80%E6%9C%89%E6%9D%83/%E5%BC%95%E7%94%A8%E4%B8%8E%E5%80%9F%E7%94%A8/</guid><description/></item><item><title>数据类型</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Sun, 13 Feb 2022 16:28:17 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Rust是静态编译语言，在编译时必须明确所有变量的类型。 编译器可以通过类型推断明确变量类型 当类型推断无法明确变量类型时，就必须添加类型标注 标量类型 整数</description></item><item><title>rustc</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/rustc/</link><pubDate>Sat, 12 Feb 2022 17:55:52 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/rustc/</guid><description>rustc是什么？ rustc是Rust语言的编译器，类似C语言的gcc，负责将*.rs程序编译为二进制文件 查看Rust版本 rustc --version #或 rustc -V 因为Rust版本</description></item><item><title>函数</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 14 Feb 2022 17:57:23 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/%E5%87%BD%E6%95%B0/</guid><description>函数声明 使用fn关键字声明函数： fn a_function() { println!(&amp;quot;A function.&amp;quot;); } 函数参数 在声明函数时，必须指明函数的参数类型 fn main() { a_function(5); } fn a_function(x: i32) { println!(&amp;quot;The value of x is: {}&amp;quot;, x); } 函数体中的语句与表达式 Rus</description></item><item><title>cargo</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/cargo/</link><pubDate>Sat, 12 Feb 2022 18:34:44 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/cargo/</guid><description>什么是cargo? cargo是Rust的构建工具和包管理工具 查看cargo版本 cargo --version 使用cargo new创建项目 cargo new hello_cargo 得到如下目录结构： hello_cargo ├── .git │ ├─</description></item><item><title>控制流</title><link>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/%E6%8E%A7%E5%88%B6%E6%B5%81/</link><pubDate>Mon, 14 Feb 2022 18:34:00 +0800</pubDate><guid>https://nat5uk1.github.io/docs/rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%B8%B8%E8%A7%81%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/%E6%8E%A7%E5%88%B6%E6%B5%81/</guid><description>if表达式 if是一个表达式，而不是语句，所以可以放在等号的右边 fn main() { let condition = true; let number = if condition { 5 } else { 6 }; println!(&amp;quot;The value of number is: {}&amp;quot;, number); } if表达式的条件必须是bool类型</description></item><item><title>React性能优化</title><link>https://nat5uk1.github.io/posts/react%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link><pubDate>Wed, 27 Jul 2022 15:31:10 +0800</pubDate><guid>https://nat5uk1.github.io/posts/react%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid><description>React性能优化 序言 ​ 我们知道，React在触发组件更新时，会采取双fiber树的方式进行从root节点开始的整树diff。容易想到，假如重新渲染整</description></item><item><title>OracleCloudVM搭建指南</title><link>https://nat5uk1.github.io/posts/oraclecloudvm%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 25 Jul 2022 09:20:56 +0800</pubDate><guid>https://nat5uk1.github.io/posts/oraclecloudvm%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</guid><description>Oracle Cloud VM 创建实例 更改默认镜像为ubuntu20.04，用户名默认为ubuntu 若创建其他镜像，用户名默认为opc 添加SSH密钥对 生成密钥对 在【实例】-【</description></item></channel></rss>